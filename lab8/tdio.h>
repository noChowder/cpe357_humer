DUP(2)                                                            Linux Programmer's Manual                                                           DUP(2)

NNAAMMEE
       dup, dup2, dup3 - duplicate a file descriptor

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt dduupp((iinntt _o_l_d_f_d));;
       iinntt dduupp22((iinntt _o_l_d_f_d,, iinntt _n_e_w_f_d));;

       ##ddeeffiinnee __GGNNUU__SSOOUURRCCEE             /* See feature_test_macros(7) */
       ##iinncclluuddee <<ffccnnttll..hh>>              /* Obtain O_* constant definitions */
       ##iinncclluuddee <<uunniissttdd..hh>>

       iinntt dduupp33((iinntt _o_l_d_f_d,, iinntt _n_e_w_f_d,, iinntt _f_l_a_g_s));;

DDEESSCCRRIIPPTTIIOONN
       The dduupp() system call creates a copy of the file descriptor _o_l_d_f_d, using the lowest-numbered unused file descriptor for the new descriptor.

       After  a successful return, the old and new file descriptors may be used interchangeably.  They refer to the same open file description (see ooppeenn(2))
       and thus share file offset and file status flags; for example, if the file offset is modified by using llsseeeekk(2) on one of the file  descriptors,  the
       offset is also changed for the other.

       The  two file descriptors do not share file descriptor flags (the close-on-exec flag).  The close-on-exec flag (FFDD__CCLLOOEEXXEECC; see ffccnnttll(2)) for the du‐
       plicate descriptor is off.

   dduupp22(())
       The dduupp22() system call performs the same task as dduupp(), but instead of using the lowest-numbered unused file descriptor, it uses the file  descriptor
       number specified in _n_e_w_f_d.  If the file descriptor _n_e_w_f_d was previously open, it is silently closed before being reused.

       The steps of closing and reusing the file descriptor _n_e_w_f_d are performed _a_t_o_m_i_c_a_l_l_y.  This is important, because trying to implement equivalent func‐
       tionality using cclloossee(2) and dduupp() would be subject to race conditions, whereby _n_e_w_f_d might be reused between the two steps.  Such reuse could happen
       because  the main program is interrupted by a signal handler that allocates a file descriptor, or because a parallel thread allocates a file descrip‐
       tor.

       Note the following points:

       *  If _o_l_d_f_d is not a valid file descriptor, then the call fails, and _n_e_w_f_d is not closed.

       *  If _o_l_d_f_d is a valid file descriptor, and _n_e_w_f_d has the same value as _o_l_d_f_d, then dduupp22() does nothing, and returns _n_e_w_f_d.

   dduupp33(())
       dduupp33() is the same as dduupp22(), except that:

       *  The caller can force the close-on-exec flag to be set for the new file descriptor by specifying OO__CCLLOOEEXXEECC in _f_l_a_g_s.  See the  description  of  the
          same flag in ooppeenn(2) for reasons why this may be useful.

       *  If _o_l_d_f_d equals _n_e_w_f_d, then dduupp33() fails with the error EEIINNVVAALL.

RREETTUURRNN VVAALLUUEE
       On success, these system calls return the new file descriptor.  On error, -1 is returned, and _e_r_r_n_o is set appropriately.

EERRRROORRSS
       EEBBAADDFF  _o_l_d_f_d isn't an open file descriptor.

       EEBBAADDFF  _n_e_w_f_d is out of the allowed range for file descriptors (see the discussion of RRLLIIMMIITT__NNOOFFIILLEE in ggeettrrlliimmiitt(2)).

       EEBBUUSSYY  (Linux only) This may be returned by dduupp22() or dduupp33() during a race condition with ooppeenn(2) and dduupp().

       EEIINNTTRR  The dduupp22() or dduupp33() call was interrupted by a signal; see ssiiggnnaall(7).

       EEIINNVVAALL (dduupp33()) _f_l_a_g_s contain an invalid value.

       EEIINNVVAALL (dduupp33()) _o_l_d_f_d was equal to _n_e_w_f_d.

       EEMMFFIILLEE The per-process limit on the number of open file descriptors has been reached (see the discussion of RRLLIIMMIITT__NNOOFFIILLEE in ggeettrrlliimmiitt(2)).

VVEERRSSIIOONNSS
       dduupp33() was added to Linux in version 2.6.27; glibc support is available starting with version 2.9.

CCOONNFFOORRMMIINNGG TTOO
       dduupp(), dduupp22(): POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.

       dduupp33() is Linux-specific.

NNOOTTEESS
       The  error  returned by dduupp22() is different from that returned by ffccnnttll((..., FF__DDUUPPFFDD, ...))  when _n_e_w_f_d is out of range.  On some systems, dduupp22() also
       sometimes returns EEIINNVVAALL like FF__DDUUPPFFDD.

       If _n_e_w_f_d was open, any errors that would have been reported at cclloossee(2) time are lost.  If this is of concern, then—unless  the  program  is  single-
       threaded  and  does not allocate file descriptors in signal handlers—the correct approach is _n_o_t to close _n_e_w_f_d before calling dduupp22(), because of the
       race condition described above.  Instead, code something like the following could be used:

           /* Obtain a duplicate of 'newfd' that can subsequently
              be used to check for close() errors; an EBADF error
              means that 'newfd' was not open. */

           tmpfd = dup(newfd);
           if (tmpfd == -1 && errno != EBADF) {
               /* Handle unexpected dup() error */
           }

           /* Atomically duplicate 'oldfd' on 'newfd' */

           if (dup2(oldfd, newfd) == -1) {
               /* Handle dup2() error */
           }

           /* Now check for close() errors on the file originally
              referred to by 'newfd' */

           if (tmpfd != -1) {
               if (close(tmpfd) == -1) {
                   /* Handle errors from close */
               }
           }

SSEEEE AALLSSOO
       cclloossee(2), ffccnnttll(2), ooppeenn(2)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting  bugs,  and  the  latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

Linux                                                                    2017-09-15                                                                   DUP(2)
